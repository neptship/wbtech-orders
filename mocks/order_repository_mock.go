// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/neptship/wbtech-orders/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepositoryMock is an autogenerated mock type for the OrderRepository type
type OrderRepositoryMock struct {
	mock.Mock
}

type OrderRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderRepositoryMock) EXPECT() *OrderRepositoryMock_Expecter {
	return &OrderRepositoryMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *OrderRepositoryMock) Get(ctx context.Context, id string) (models.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderRepositoryMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type OrderRepositoryMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *OrderRepositoryMock_Expecter) Get(ctx interface{}, id interface{}) *OrderRepositoryMock_Get_Call {
	return &OrderRepositoryMock_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *OrderRepositoryMock_Get_Call) Run(run func(ctx context.Context, id string)) *OrderRepositoryMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderRepositoryMock_Get_Call) Return(_a0 models.Order, _a1 error) *OrderRepositoryMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderRepositoryMock_Get_Call) RunAndReturn(run func(context.Context, string) (models.Order, error)) *OrderRepositoryMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, o
func (_m *OrderRepositoryMock) Save(ctx context.Context, o models.Order) error {
	ret := _m.Called(ctx, o)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderRepositoryMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type OrderRepositoryMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - o models.Order
func (_e *OrderRepositoryMock_Expecter) Save(ctx interface{}, o interface{}) *OrderRepositoryMock_Save_Call {
	return &OrderRepositoryMock_Save_Call{Call: _e.mock.On("Save", ctx, o)}
}

func (_c *OrderRepositoryMock_Save_Call) Run(run func(ctx context.Context, o models.Order)) *OrderRepositoryMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *OrderRepositoryMock_Save_Call) Return(_a0 error) *OrderRepositoryMock_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderRepositoryMock_Save_Call) RunAndReturn(run func(context.Context, models.Order) error) *OrderRepositoryMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderRepositoryMock creates a new instance of OrderRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepositoryMock {
	mock := &OrderRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
