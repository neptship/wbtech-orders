// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "github.com/neptship/wbtech-orders/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// CacheMock is an autogenerated mock type for the Cache type
type CacheMock struct {
	mock.Mock
}

type CacheMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheMock) EXPECT() *CacheMock_Expecter {
	return &CacheMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: id
func (_m *CacheMock) Get(id string) (models.Order, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Order
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (models.Order, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Order); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// CacheMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CacheMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *CacheMock_Expecter) Get(id interface{}) *CacheMock_Get_Call {
	return &CacheMock_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *CacheMock_Get_Call) Run(run func(id string)) *CacheMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CacheMock_Get_Call) Return(_a0 models.Order, _a1 bool) *CacheMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheMock_Get_Call) RunAndReturn(run func(string) (models.Order, bool)) *CacheMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: id, order
func (_m *CacheMock) Set(id string, order models.Order) {
	_m.Called(id, order)
}

// CacheMock_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CacheMock_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - id string
//   - order models.Order
func (_e *CacheMock_Expecter) Set(id interface{}, order interface{}) *CacheMock_Set_Call {
	return &CacheMock_Set_Call{Call: _e.mock.On("Set", id, order)}
}

func (_c *CacheMock_Set_Call) Run(run func(id string, order models.Order)) *CacheMock_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.Order))
	})
	return _c
}

func (_c *CacheMock_Set_Call) Return() *CacheMock_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheMock_Set_Call) RunAndReturn(run func(string, models.Order)) *CacheMock_Set_Call {
	_c.Run(run)
	return _c
}

// NewCacheMock creates a new instance of CacheMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheMock {
	mock := &CacheMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
